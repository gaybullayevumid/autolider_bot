import os
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.types import BotCommand, Message, ReplyKeyboardMarkup, KeyboardButton, FSInputFile
from aiogram.filters import Command
from asyncio import run
import pandas as pd
import psycopg2
from psycopg2.extras import DictCursor

# Database connection settings
DB_SETTINGS = {
    'dbname': 'avtolider',
    'user': 'postgres',
    'password': '8505',
    'host': 'localhost',
    'port': 5432
}

# Bot token
BOT_TOKEN = "7769778979:AAFNG8nuj0m2rbWbJFHz8Jb2-FHS_Bv5qIc"

# Initialize bot and dispatcher
bot = Bot(BOT_TOKEN)
dp = Dispatcher()

# Logging configuration
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# Months list
months = [
    "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
    "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
]

# Keyboards
keyboards = {
    "months": ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=m) for m in months[i:i + 3]] for i in range(0, 12, 3)] + [[KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
        resize_keyboard=True
    ),
    "request_contact": ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]],
        resize_keyboard=True
    ),
}

# Helper function to format phone number
def phone_number_format(phone_number):
    phone_number = phone_number.replace(" ", "").replace("-", "").replace("(", "").replace(")", "")
    if phone_number.startswith("998"):
        phone_number = "+" + phone_number
    elif not phone_number.startswith("+998"):
        phone_number = "+998" + phone_number
    return phone_number

# Function to get database connection
def get_db_connection():
    return psycopg2.connect(**DB_SETTINGS)

# Async function to check company
async def check_company(phone_number, chat_id):
    logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}")
    conn = None
    try:
        conn = get_db_connection()
        with conn.cursor(cursor_factory=DictCursor) as cursor:
            cursor.execute("SELECT * FROM base_company WHERE phone_number = %s", (phone_number,))
            company = cursor.fetchone()

            if company:
                if company['chat_id'] is None:
                    cursor.execute("UPDATE base_company SET chat_id = %s WHERE id = %s", (chat_id, company['id']))
                    conn.commit()
                    logging.info(f"Chat ID –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏: {company['name']}")
                elif company['chat_id'] == chat_id:
                    logging.info(f"–ö–æ–º–ø–∞–Ω–∏—è —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone_number} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å —ç—Ç–∏–º chat_id.")
                return company
            else:
                logging.warning(f"–ö–æ–º–ø–∞–Ω–∏—è —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–º–ø–∞–Ω–∏–∏: {e}")
        return None
    finally:
        if conn:
            conn.close()

# Async function to export data to Excel
async def export_to_excel(phone_number, month_name=None, currency=None):
    conn = None
    try:
        conn = get_db_connection()
        with conn.cursor(cursor_factory=DictCursor) as cursor:
            query = """
                SELECT id, title, count, price, created_at, total_price
                FROM base_product
                WHERE company_id IN (SELECT id FROM base_company WHERE phone_number = %s)
            """
            params = [phone_number]

            if month_name:
                month_index = months.index(month_name) + 1
                query += " AND EXTRACT(MONTH FROM created_at) = %s"
                params.append(month_index)

            cursor.execute(query, params)
            products = cursor.fetchall()

            if not products:
                logging.warning(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone_number} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return None

            df = pd.DataFrame(products, columns=['id', 'title', 'count', 'price', 'created_at', 'total_price'])
            df["created_at"] = pd.to_datetime(df["created_at"]).dt.tz_localize(None)

            if currency == "SUM":
                total_sum = df['total_price'].sum()
                total_sum_row = pd.DataFrame({
                    'id': ['–ò—Ç–æ–≥–æ (SUM)'],
                    'title': [''],
                    'count': [''],
                    'price': [''],
                    'created_at': [''],
                    'total_price': [total_sum]
                })
                df = pd.concat([df, total_sum_row], ignore_index=True)
                file_path = "total_sum_sum.xlsx"
            elif currency == "USD":
                total_sum = df['total_price'].sum()
                exchange_rate = 11000  # 1 USD = 11000 SUM
                total_usd = total_sum / exchange_rate
                total_usd_row = pd.DataFrame({
                    'id': ['–ò—Ç–æ–≥–æ (USD)'],
                    'title': [''],
                    'count': [''],
                    'price': [''],
                    'created_at': [''],
                    'total_price': [total_usd]
                })
                df = pd.concat([df, total_usd_row], ignore_index=True)
                file_path = "total_sum_usd.xlsx"
            else:
                file_path = f"invoice_{month_name.lower()}.xlsx" if month_name else "invoice.xlsx"

            df.to_excel(file_path, index=False)
            logging.info(f"–§–∞–π–ª —Å–æ–∑–¥–∞–Ω: {file_path}")
            return file_path
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        return None
    finally:
        if conn:
            conn.close()

# Registration process tracker
user_registration_status = {}
user_phone_numbers = {}

# Start handler
async def start_handler(message: Message):
    logging.info("–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç–∞ –≤—ã–∑–≤–∞–Ω–∞.")
    if message.from_user.id in user_phone_numbers:
        await message.answer("–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!", reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ù–∞–∫–ª–∞–¥–Ω—ã–µ")],
                [KeyboardButton(text="üìä–ë–∞–ª–∞–Ω—Å–æ–≤—ã–π –∞–∫—Ç (SUM)"), KeyboardButton(text="üìä–ë–∞–ª–∞–Ω—Å–æ–≤—ã–π –∞–∫—Ç (USD)"), KeyboardButton(text="‚òéÔ∏è–ö–æ–Ω—Ç–∞–∫—Ç—ã")],
                [KeyboardButton(text="üìú–û –∫–æ–º–ø–∞–Ω–∏–∏")]
            ],
            resize_keyboard=True
        ))
    else:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")]],
            resize_keyboard=True
        ))

# Menu handler
async def menu_handler(message: Message):
    logging.info(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –≤—ã–∑–≤–∞–Ω —Å —Ç–µ–∫—Å—Ç–æ–º: {message.text}")
    if message.from_user.id in user_phone_numbers:
        main_keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ù–∞–∫–ª–∞–¥–Ω—ã–µ")],
                [KeyboardButton(text="üìä–ë–∞–ª–∞–Ω—Å–æ–≤—ã–π –∞–∫—Ç (SUM)"), KeyboardButton(text="üìä–ë–∞–ª–∞–Ω—Å–æ–≤—ã–π –∞–∫—Ç (USD)"), KeyboardButton(text="‚òéÔ∏è–ö–æ–Ω—Ç–∞–∫—Ç—ã")],
                [KeyboardButton(text="üìú–û –∫–æ–º–ø–∞–Ω–∏–∏")]
            ],
            resize_keyboard=True
        )
    else:
        main_keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")]
            ],
            resize_keyboard=True
        )
    if message.text == "–ù–∞–∫–ª–∞–¥–Ω—ã–µ":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", reply_markup=keyboards["months"])
    elif message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard)
    elif message.text == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
        if message.from_user.id not in user_phone_numbers:
            user_registration_status[message.from_user.id] = True
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.", reply_markup=keyboards["request_contact"])
        else:
            await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=main_keyboard)

# Contact handler
async def handle_contact(message: Message):
    if message.contact:
        if message.contact.user_id != message.from_user.id:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!")
            return
        phone_number = phone_number_format(message.contact.phone_number)
        logging.info(f"–ü–æ–ª—É—á–µ–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}")
        if user_registration_status.get(message.from_user.id, False):
            company = await check_company(phone_number, message.from_user.id)
            if company:
                await message.answer(f"–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone_number} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=ReplyKeyboardMarkup(
                    keyboard=[
                        [KeyboardButton(text="–ù–∞–∫–ª–∞–¥–Ω—ã–µ")],
                        [KeyboardButton(text="üìä–ë–∞–ª–∞–Ω—Å–æ–≤—ã–π –∞–∫—Ç (SUM)"), KeyboardButton(text="üìä–ë–∞–ª–∞–Ω—Å–æ–≤—ã–π –∞–∫—Ç (USD)"), KeyboardButton(text="‚òéÔ∏è–ö–æ–Ω—Ç–∞–∫—Ç—ã")],
                        [KeyboardButton(text="üìú–û –∫–æ–º–ø–∞–Ω–∏–∏")]
                    ],
                    resize_keyboard=True
                ))
                user_phone_numbers[message.from_user.id] = phone_number
            else:
                await message.answer("–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ –¥—Ä—É–≥—É—é –∫–æ–º–ø–∞–Ω–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.")
                user_registration_status[message.from_user.id] = False
        else:
            await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'.")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")

# About the Company handler
async def about_company_handler(message: Message):
    logging.info(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ '–û –∫–æ–º–ø–∞–Ω–∏–∏' –≤—ã–∑–≤–∞–Ω —Å —Ç–µ–∫—Å—Ç–æ–º: {message.text}")
    company_info = (
        "üè¢ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: –ü—Ä–∏–º–µ—Ä –ö–æ–º–ø–∞–Ω–∏–∏\n"
        "üìç –ê–¥—Ä–µ—Å: –ù–∞–≤–æ–∏, –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω\n"
        "üìû –¢–µ–ª–µ—Ñ–æ–Ω: +998930850955\n"
        "üåê –í–µ–±-—Å–∞–π—Ç: www.example.com\n"
        "üìß –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞: info@example.com\n"
        "üìù –û–ø–∏—Å–∞–Ω–∏–µ: –ú—ã —è–≤–ª—è–µ–º—Å—è –≤–µ–¥—É—â–µ–π –∫–æ–º–ø–∞–Ω–∏–µ–π –≤ –æ—Ç—Ä–∞—Å–ª–∏, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–µ–π –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –∏ –ø—Ä–æ–¥—É–∫—Ç—ã."
    )
    await message.answer(company_info)

# Contacts handler
async def phone_handler(message: Message):
    logging.info(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤—ã–∑–≤–∞–Ω —Å —Ç–µ–∫—Å—Ç–æ–º: {message.text}")
    phone_info = (
        "–¢–µ–ª:\n"
        "+998912518505 –£–º–∏–¥\n"
        "+998912518505 –£–º–∏–¥"
    )
    await message.answer(phone_info)

# Month handler
async def month_handler(message: Message):
    logging.info(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ—Å—è—Ü–∞ –≤—ã–∑–≤–∞–Ω —Å —Ç–µ–∫—Å—Ç–æ–º: {message.text}")
    if message.from_user.id not in user_phone_numbers:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å–Ω–∞—á–∞–ª–∞.", reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")]],
            resize_keyboard=True
        ))
        return
    phone_number = user_phone_numbers.get(message.from_user.id)
    if not phone_number:
        await message.reply("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É —Å –¥—Ä—É–≥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å–Ω–∞—á–∞–ª–∞.")
        return
    month_name = message.text
    file_path = await export_to_excel(phone_number, month_name)
    if file_path:
        excel_file = FSInputFile(file_path)
        await message.answer_document(excel_file, caption=f"–î–∞–Ω–Ω—ã–µ –∑–∞ –º–µ—Å—è—Ü {month_name}.")
    else:
        await message.reply("–î–∞–Ω–Ω—ã–µ –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")

# Balance Act (SUM) handler
async def balance_act_sum_handler(message: Message):
    logging.info(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–∞–ª–∞–Ω—Å–æ–≤–æ–≥–æ –∞–∫—Ç–∞ (SUM) –≤—ã–∑–≤–∞–Ω —Å —Ç–µ–∫—Å—Ç–æ–º: {message.text}")
    if message.from_user.id not in user_phone_numbers:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å–Ω–∞—á–∞–ª–∞.", reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")]],
            resize_keyboard=True
        ))
        return
    phone_number = user_phone_numbers.get(message.from_user.id)
    if not phone_number:
        await message.reply("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É —Å –¥—Ä—É–≥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å–Ω–∞—á–∞–ª–∞.")
        return
    file_path = await export_to_excel(phone_number, currency="SUM")
    if file_path:
        excel_file = FSInputFile(file_path)
        await message.answer_document(excel_file, caption="–í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Å –∏—Ç–æ–≥–æ–≤–æ–π —Å—É–º–º–æ–π –≤ SUM.")
    else:
        await message.reply("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

# Balance Act (USD) handler
async def balance_act_usd_handler(message: Message):
    logging.info(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–∞–ª–∞–Ω—Å–æ–≤–æ–≥–æ –∞–∫—Ç–∞ (USD) –≤—ã–∑–≤–∞–Ω —Å —Ç–µ–∫—Å—Ç–æ–º: {message.text}")
    if message.from_user.id not in user_phone_numbers:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å–Ω–∞—á–∞–ª–∞.", reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")]],
            resize_keyboard=True
        ))
        return
    phone_number = user_phone_numbers.get(message.from_user.id)
    if not phone_number:
        await message.reply("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É —Å –¥—Ä—É–≥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å–Ω–∞—á–∞–ª–∞.")
        return
    file_path = await export_to_excel(phone_number, currency="USD")
    if file_path:
        excel_file = FSInputFile(file_path)
        await message.answer_document(excel_file, caption="–í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Å –∏—Ç–æ–≥–æ–≤–æ–π —Å—É–º–º–æ–π –≤ USD.")
    else:
        await message.reply("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

# Help handler
async def help_handler(message: Message):
    logging.info("–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏ –≤—ã–∑–≤–∞–Ω–∞.")
    await message.answer(
        "–≠—Ç–æ –±–æ—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö.\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/help - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å\n"
        "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è."
    )

# Main start function
async def start():
    try:
        logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await bot.set_my_commands([
            BotCommand(command="/start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            BotCommand(command="/help", description="–ü–æ–º–æ—â—å!")
        ])
        dp.message.register(start_handler, Command("start"))
        dp.message.register(help_handler, Command("help"))
        dp.message.register(menu_handler, F.text.in_(["–ù–∞–∫–ª–∞–¥–Ω—ã–µ", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"]))
        dp.message.register(handle_contact, F.contact)
        dp.message.register(month_handler, F.text.in_(months))
        dp.message.register(balance_act_sum_handler, F.text == "üìä–ë–∞–ª–∞–Ω—Å–æ–≤—ã–π –∞–∫—Ç (SUM)")
        dp.message.register(balance_act_usd_handler, F.text == "üìä–ë–∞–ª–∞–Ω—Å–æ–≤—ã–π –∞–∫—Ç (USD)")
        dp.message.register(about_company_handler, F.text == "üìú–û –∫–æ–º–ø–∞–Ω–∏–∏")
        dp.message.register(phone_handler, F.text == "‚òéÔ∏è–ö–æ–Ω—Ç–∞–∫—Ç—ã")
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == "__main__":
    run(start())